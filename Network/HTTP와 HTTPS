# HTTP와 HTTPS

## 1. HTTP란?

- HyperText Transfer Protocol의 약자 

- 웹상에서 클라이언트와 서버가 자원을 주고받기 위한 프로토콜

- 특징
  -- connectionless (비연결성) : 한 번의 연결으로 한 번 Http 통신을 한다.
  -- Stateless (무상태) : 이전에 클라이언트의 상태를 저장하지 않는다.
     --> 이전의 상태를 유지해야할 필요가 있는데, 이를 위해서 쿠키 혹은 세션(하이퍼링크)을 이용한다. 

  -- 평문 통신이기 때문에 보안에 취약하다. 제3자가 패킷을 가로챈다면 내용이 노출된다.
     --> HTTP Request Method GET  : 헤더에 내용을 추가. URL에 노출된다.
     --> HTTP Request Method POST : body에 내용을 추가. URL에 노출되지 않지만 여전히 평문이기 때문에 패킷 스니핑을 통해 내용이 노출될 수 있다. 
  
  -- port 번호로 80번을 이용한다.


## 2. HTTPS란?

- HTTP Secure의 약자

- HTTP에 보안이 강화된 프로토콜

- SSL(Secure Socket Layer) 프로토콜 혹은 TLS(Transport Layer Security) 프로토콜을 통해 데이터를 암호화한다.

- 공개키 기반 구조(PKI)를 이용. 
   --> 공개키 암호화 기법의 문제점인 중간자 공격(Man in the middle attack)에 대비하기 위한 것.
   
  - 공개키 기반 구조 단계
     1. 서버가 인증된 기관(CA)에게 자신의 공개키로 인증서를 만들어달라고 요청한다.
     2. 인증된 기관(CA)은 자신의 개인키로 서버의 정보와 서버의 공개키를 함께 암호화하여 인증서를 만들고 서버에게 돌려준다.
     3. 클라이언트가 서버에 접속을 요청하면 서버는 인증서를 보내준다.
     4. 인증서를 CA의 공개키로 복호화하여 이 인증서가 CA가 만든 것임을 증명받는다. 따라서, 서버의 공개키를 믿을 수 있게 된다.-> <b>전자서명</b>
     5. 서버의 공개키로 자신의 비밀키를 암호화하여 서버에게 전송한다.  -> <b>공개키 암호화 기법<b>
     6. 서버는 클라이언트의 비밀키를 알게 되고 자신의 비밀키를 클라이언트의 비밀키로 암호화하여 전송한다.
     7. 클라이언트는 자신의 비밀키로 복호화하여 서버의 비밀키를 알게 된다.
     8. 서로 교환한 비밀키로 대칭키 암호화 방식으로 암호 통신을 한다.   -> <b>대칭키 암호화 기법<b>


- HTTPS를 이용하여 보안이 강화된다는 장점이 있지만, HTTP에 비해 느리고 인증서 유지를 위한 추가 비용이 발생한다는 단점이 있다.


 

